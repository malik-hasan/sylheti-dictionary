CREATE TABLE IF NOT EXISTS DictionaryEntry (
    entryId TEXT PRIMARY KEY NOT NULL,
    lexemeIPA TEXT NOT NULL,
    lexemeEN TEXT,
    lexemeSN TEXT,
    citationIPA TEXT,
    citationEN TEXT,
    citationSN TEXT,
    senseId TEXT UNIQUE,
    partOfSpeech TEXT,
    gloss TEXT,
    definitionEnglish TEXT,
    definitionBengali TEXT,
    definitionBengaliIPA TEXT,
    definitionIPA TEXT,
    definitionSN TEXT
);

CREATE TABLE IF NOT EXISTS RelatedEntryCrossRef (
    senseId1 TEXT NOT NULL,
    senseId2 TEXT NOT NULL,
    relationType1 TEXT NOT NULL,
    relationType2 TEXT NOT NULL,
    FOREIGN KEY (senseId1) REFERENCES DictionaryEntry(senseId),
    FOREIGN KEY (senseId2) REFERENCES DictionaryEntry(senseId),
    PRIMARY KEY (senseId1, senseId2),
    CHECK (senseId1 < senseId2)
);

CREATE TABLE IF NOT EXISTS Example (
    id INTEGER PRIMARY KEY,
    entryId TEXT NOT NULL,
    exampleIPA TEXT,
    exampleEN TEXT,
    exampleSN TEXT,
    exampleEnglish TEXT,
    exampleBengali TEXT,
    exampleBengaliIPA TEXT,
    FOREIGN KEY (entryId) REFERENCES DictionaryEntry(entryId)
);

CREATE INDEX IF NOT EXISTS idx_Example_entryId ON Example(entryId);

CREATE TABLE IF NOT EXISTS Variant (
    id INTEGER PRIMARY KEY,
    entryId TEXT NOT NULL,
    variantIPA TEXT NOT NULL,
    variantEN TEXT,
    variantSN TEXT,
    environment TEXT,
    FOREIGN KEY (entryId) REFERENCES DictionaryEntry(entryId)
);

CREATE TABLE IF NOT EXISTS ComponentEntry (
    entryId TEXT NOT NULL,
    componentId TEXT NOT NULL,
    complexFormType TEXT,
    variantType TEXT,
    FOREIGN KEY (entryId) REFERENCES DictionaryEntry(entryId),
    FOREIGN KEY (componentId) REFERENCES DictionaryEntry(entryId),
    PRIMARY KEY (entryId, componentId, complexFormType, variantType)
);

getEntry:
SELECT * FROM DictionaryEntry
WHERE entryId = :entryId;

getEntries:
SELECT * FROM DictionaryEntry
WHERE entryId IN :entryIds;

searchAllEntries:
SELECT * FROM DictionaryEntry
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery;

searchAllEntriesWithDefinitions:
SELECT * FROM DictionaryEntry
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery
    OR definitionEnglish GLOB :simpleQuery
    OR definitionIPA GLOB :simpleQuery
    OR definitionBengali GLOB :simpleQuery
    OR definitionSN GLOB :simpleQuery;

searchAllEntriesWithExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery
    OR exampleIPA GLOB :simpleQuery
    OR exampleEN GLOB :simpleQuery
    OR exampleSN GLOB :simpleQuery
    OR exampleEnglish GLOB :simpleQuery
    OR exampleBengali GLOB :simpleQuery;

searchAllEntriesWithDefinitionsAndExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery
    OR definitionEnglish GLOB :simpleQuery
    OR definitionIPA GLOB :simpleQuery
    OR definitionBengali GLOB :simpleQuery
    OR definitionSN GLOB :simpleQuery
    OR exampleIPA GLOB :simpleQuery
    OR exampleEN GLOB :simpleQuery
    OR exampleSN GLOB :simpleQuery
    OR exampleEnglish GLOB :simpleQuery
    OR exampleBengali GLOB :simpleQuery;

searchEnglishEntries:
SELECT * FROM DictionaryEntry
WHERE gloss GLOB :positionedQuery;

searchEnglishEntriesWithDefinitions:
SELECT * FROM DictionaryEntry
WHERE gloss GLOB :positionedQuery
    OR definitionEnglish GLOB :simpleQuery;

searchEnglishEntriesWithExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE gloss GLOB :positionedQuery
    OR exampleEnglish GLOB :simpleQuery;

searchEnglishEntriesWithDefinitionsAndExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE gloss GLOB :positionedQuery
    OR definitionEnglish GLOB :simpleQuery
    OR exampleEnglish GLOB :simpleQuery;

searchSylhetiLatinEntries:
SELECT * FROM DictionaryEntry
WHERE lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery;

searchSylhetiLatinEntriesWithDefinitions:
SELECT * FROM DictionaryEntry
WHERE lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR definitionIPA GLOB :simpleQuery;

searchSylhetiLatinEntriesWithExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR exampleIPA GLOB :simpleQuery;

searchSylhetiLatinEntriesWithDefinitionsAndExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR definitionIPA GLOB :simpleQuery
    OR exampleIPA GLOB :simpleQuery;

searchLatinEntries:
SELECT * FROM DictionaryEntry
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery;

searchLatinEntriesWithDefinitions:
SELECT * FROM DictionaryEntry
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR definitionEnglish GLOB :simpleQuery
    OR definitionIPA GLOB :simpleQuery;

searchLatinEntriesWithExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR exampleEnglish GLOB :simpleQuery
    OR exampleIPA GLOB :simpleQuery;

searchLatinEntriesWithDefinitionsAndExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE gloss GLOB :positionedQuery
    OR lexemeIPA GLOB :positionedQuery
    OR citationIPA GLOB :positionedQuery
    OR definitionEnglish GLOB :simpleQuery
    OR definitionIPA GLOB :simpleQuery
    OR exampleEnglish GLOB :simpleQuery
    OR exampleIPA GLOB :simpleQuery;

searchBengaliEasternNagriDefinitions:
SELECT * FROM DictionaryEntry
WHERE definitionBengali GLOB :simpleQuery;

searchBengaliEasternNagriDefinitionsAndExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE definitionBengali GLOB :simpleQuery
    OR exampleBengali GLOB :simpleQuery;

searchSylhetiEasternNagriEntries:
SELECT * FROM DictionaryEntry
WHERE lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery;

searchSylhetiEasternNagriEntriesWithExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR exampleEN GLOB :simpleQuery;

searchEasternNagriEntriesWithDefinitions:
SELECT * FROM DictionaryEntry
WHERE lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR definitionBengali GLOB :simpleQuery;

searchEasternNagriEntriesWithExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR exampleEN GLOB :simpleQuery
    OR exampleBengali GLOB :simpleQuery;

searchEasternNagriEntriesWithDefinitionsAndExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE lexemeEN GLOB :positionedQuery
    OR citationEN GLOB :positionedQuery
    OR definitionBengali GLOB :simpleQuery
    OR exampleEN GLOB :simpleQuery
    OR exampleBengali GLOB :simpleQuery;

searchSylhetiNagriEntries:
SELECT * FROM DictionaryEntry
WHERE lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery;

searchSylhetiNagriEntriesWithDefinitions:
SELECT * FROM DictionaryEntry
WHERE lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery
    OR definitionSN GLOB :simpleQuery;

searchSylhetiNagriEntriesWithExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery
    OR exampleSN GLOB :simpleQuery;

searchSylhetiNagriEntriesWithDefinitionsAndExamples:
SELECT D.* FROM DictionaryEntry D
LEFT JOIN Example USING(entryId)
WHERE lexemeSN GLOB :positionedQuery
    OR citationSN GLOB :positionedQuery
    OR definitionSN GLOB :simpleQuery
    OR exampleSN GLOB :simpleQuery;

getExamples:
SELECT * FROM Example
WHERE entryId = :entryId;

getVariants:
SELECT * FROM Variant
WHERE entryId = :entryId;

getAdditionalVariants:
SELECT D.entryId, citationIPA, lexemeIPA, citationEN, lexemeEN, citationSN, lexemeSN, variantType
FROM DictionaryEntry D
JOIN ComponentEntry USING(entryId)
WHERE componentId = :entryId
    AND variantType IS NOT NULL;

getReferenceEntries:
SELECT D.* FROM DictionaryEntry D
JOIN ComponentEntry CE ON D.entryId = CE.componentId
WHERE CE.entryId = :entryId
    AND variantType IS NOT NULL;

componentEntry:
SELECT D.*, complexFormType FROM DictionaryEntry D
JOIN ComponentEntry CE ON D.entryId = CE.componentId
WHERE CE.entryId = :entryId
    AND complexFormType IS NOT NULL;

relatedEntry:
SELECT D.*,
    CASE
        WHEN senseId1 = :senseId THEN relationType1
        ELSE relationType2
    END AS relationType
FROM DictionaryEntry D
JOIN RelatedEntryCrossRef ON senseId = senseId1
    OR senseId = senseId2
WHERE (senseId1 = :senseId OR senseId2 = :senseId)
    AND senseId != :senseId;

getPartsOfSpeech:
SELECT DISTINCT LOWER(partOfSpeech) FROM DictionaryEntry
WHERE partOfSpeech LIKE '%' || :query || '%'
ORDER BY LOWER(partOfSpeech);

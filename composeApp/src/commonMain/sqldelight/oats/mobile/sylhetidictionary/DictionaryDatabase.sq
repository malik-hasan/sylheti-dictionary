CREATE TABLE IF NOT EXISTS DictionaryEntry (
    entryId TEXT PRIMARY KEY NOT NULL,
    lexemeIPA TEXT NOT NULL,
    lexemeBengali TEXT,
    lexemeNagri TEXT,
    citationIPA TEXT,
    citationBengali TEXT,
    citationNagri TEXT,
    senseId TEXT UNIQUE,
    partOfSpeech TEXT,
    gloss TEXT,
    definitionEN TEXT,
    definitionBN TEXT,
    definitionBNIPA TEXT,
    definitionIPA TEXT,
    definitionNagri TEXT
);

getAll:
SELECT * FROM DictionaryEntry;

searchSylLatin:
SELECT * FROM DictionaryEntry
WHERE lexemeIPA GLOB :query OR
    citationIPA GLOB :query OR
    definitionIPA GLOB :query;

CREATE TABLE IF NOT EXISTS EntryCrossRef (
    senseId1 TEXT NOT NULL,
    senseId2 TEXT NOT NULL,
    relationType TEXT NOT NULL,
    FOREIGN KEY (senseId1) REFERENCES DictionaryEntry(senseId),
    FOREIGN KEY (senseId2) REFERENCES DictionaryEntry(senseId),
    PRIMARY KEY (senseId1, senseId2),
    CHECK (senseId1 < senseId2)
);

CREATE TABLE IF NOT EXISTS Domain(
    domainId TEXT PRIMARY KEY NOT NULL,
    description TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS EntryDomainCrossRef (
    entryId TEXT NOT NULL,
    domainId TEXT NOT NULL,
    FOREIGN KEY (entryId) REFERENCES DictionaryEntry(entryId),
    FOREIGN KEY (domainId) REFERENCES Domain(domainId),
    PRIMARY KEY (entryId, domainId)
);

CREATE TABLE IF NOT EXISTS Example (
    id INTEGER PRIMARY KEY,
    entryId TEXT NOT NULL,
    exampleIPA TEXT,
    exampleBengali TEXT,
    exampleNagri TEXT,
    exampleEN TEXT,
    exampleBN TEXT,
    exampleBNIPA TEXT,
    FOREIGN KEY (entryId) REFERENCES DictionaryEntry(entryId)
);

CREATE TABLE IF NOT EXISTS Variant (
    id INTEGER PRIMARY KEY,
    entryId TEXT NOT NULL,
    variantIPA TEXT NOT NULL,
    variantBengali TEXT,
    variantNagri TEXT,
    environment TEXT,
    FOREIGN KEY (entryId) REFERENCES DictionaryEntry(entryId)
);

CREATE TABLE IF NOT EXISTS ComponentLexeme (
    id INTEGER PRIMARY KEY,
    entryId TEXT NOT NULL,
    componentId TEXT NOT NULL,
    isPrimary INTEGER NOT NULL,
    complexFormType TEXT,
    variantType TEXT,
    FOREIGN KEY (entryId) REFERENCES DictionaryEntry(entryId),
    FOREIGN KEY (componentId) REFERENCES DictionaryEntry(entryId)
);
